{"version":3,"sources":["../lib/park.js"],"names":[],"mappings":"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","file":"park.js","sourcesContent":["\"use strict\";\r\n\r\n// our simple geolocation object library\r\nvar GeoLocation = require('./geoLocation.js');\r\n// a basic debug log wrapper\r\nvar DebugLog = require('./debugPrint.js');\r\n\r\n// MomentJS time library\r\nvar moment = require(\"moment-timezone\");\r\n// random useragent generator\r\nvar random_useragent = require(\"random-useragent\");\r\n\r\n// load user settings\r\nvar Settings = require(\"./settings\");\r\n\r\n// our Ride object\r\nvar Ride = require(\"./ride\");\r\n\r\n// default time format for returning times\r\nvar DefaultTimeFormat = \"YYYY-MM-DDTHH:mm:ssZ\";\r\n\r\n// park symbols\r\nvar s_parkName = Symbol();\r\nvar s_parkTimezone = Symbol();\r\nvar s_parkGeolocation = Symbol();\r\nvar s_parkTimeFormat = Symbol();\r\nvar s_useragent = Symbol();\r\nvar s_cacheTimeWaitTimes = Symbol();\r\n// track which Ride ID is at which index in our Rides array\r\nvar s_rideIDToIDXMap = Symbol();\r\n\r\n// ride wait time storage\r\nvar s_waitTimeStore = Symbol();\r\n\r\n// key for generic cached data\r\nvar cacheKey = \"themeparks_cache_\";\r\n// at end of constructor, generate the cache key for this park and store it privately here\r\nvar s_cacheKeyWaitTimes = Symbol();\r\n\r\n/**\r\n * Park class handles all the base logic for all implemented themeparks.\r\n * All parks should inherit from this base class.\r\n * Any common functionality is implemented here to save endless re-implementations for each park.\r\n * @class\r\n */\r\nclass Park {\r\n  /**\r\n   * Create a new Park object\r\n   * @param {Object} options\r\n   * @param {String} options.name The name of this park\r\n   * @param {String} options.timezone Park's timezone\r\n   * @param {String} [options.timeFormat] Format to display park dates in\r\n   * @param {Number} [options.cacheWaitTimesLength=300] How long (in seconds) to cache wait times before fetching fresh time\r\n   * @param {Number} options.latitude Park's latitude\r\n   * @param {Number} options.longitude Park's longitude\r\n   * @param {String} [options.useragent] Useragent to use when making HTTP requests\r\n   */\r\n  constructor(options = {}) {\r\n    // can only construct actual parks, not the park object itself\r\n    //  see https://stackoverflow.com/questions/29480569/does-ecmascript-6-have-a-convention-for-abstract-classes\r\n    if (new.target === Park) {\r\n      throw new TypeError(\"Cannot create Park object directly, only park implementations of Park\");\r\n    }\r\n\r\n    // take base variables from the constructor\r\n    //  these variables should be present for all parks\r\n    // what's up with these OR things?\r\n    //  by default, use any manually passed in options\r\n    //  finally, fallback on the default settings\r\n    this[s_parkName] = options.name || Settings.DefaultParkName;\r\n    this[s_parkTimezone] = options.timezone || Settings.DefaultParkTimezone;\r\n    this[s_parkTimeFormat] = options.timeFormat || Settings.DefaultParkTimeFormat;\r\n\r\n    // cache settings\r\n    //  how long wait times are cached before fetching new data\r\n    this[s_cacheTimeWaitTimes] = options.cacheWaitTimesLength;\r\n\r\n    // validate park's timezone with momentjs\r\n    if (!moment.tz.zone(this[s_parkTimezone])) {\r\n      throw new Error(`Invalid timezone ${this[s_parkTimezone]} passed to park constructor.`);\r\n    }\r\n\r\n    // create a geolocation object if we've been passed a longitude and latitude\r\n    if (!this[s_parkGeolocation] && typeof(options.latitude) == \"number\" && typeof(options.longitude) == \"number\") {\r\n      this[s_parkGeolocation] = new GeoLocation({\r\n        longitude: options.longitude,\r\n        latitude: options.latitude\r\n      });\r\n    }\r\n\r\n    // validate our geolocation object has been created\r\n    if (!this[s_parkGeolocation]) {\r\n      throw new Error(`No park GeoLocation object created for ${this.name}. Please supply longitude and latitude for this park.`);\r\n    }\r\n\r\n    // set useragent, or if no useragent has been set, create a random Android one by default\r\n    this.UserAgent = options.useragent || function(ua) {\r\n      return (ua.osName == \"Android\");\r\n    };\r\n\r\n    // initialise the Rides array\r\n    this.Rides = [];\r\n    // also initialise our ride ID -> idx map\r\n    this[s_rideIDToIDXMap] = {};\r\n\r\n    // generate cache keys for this park (use cacheKey, the name of this object, _waittimes)\r\n    this[s_cacheKeyWaitTimes] = `${cacheKey}${this.constructor.name}_waittimes`;\r\n  }\r\n\r\n  /**\r\n   * Get waiting times for rides from this park\r\n   * Callback will call with callback(error, data)\r\n   * Data will be null if error is present\r\n   */\r\n  GetWaitTimes(callback) {\r\n    // translate the promise result into a \"classic\" callback response\r\n    this.GetWaitTimesPromise().then(function(data) {\r\n      callback(null, data);\r\n    }, function(error) {\r\n      callback(error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch the ride data for the requested ID. If it doesn't exist, add a new ride to our park's ride set\r\n   * @param {Object} ride - Ride data to apply\r\n   * @param {String} ride.id - Ride's ID\r\n   * @param {String} ride.name - Ride's name\r\n   * @returns {Ride} ride - Newly created (or the existing) Ride object\r\n   */\r\n  GetRideObject(ride = {}) {\r\n    if (!ride) {\r\n      this.Dbg(\"No Ride Data supplied to GetRideObject\");\r\n      return null;\r\n    }\r\n    if (ride.id === undefined) {\r\n      this.Dbg(\"No Ride ID supplied to GetRideObject\", ride);\r\n      return null;\r\n    }\r\n    if (ride.name === undefined) {\r\n      this.Dbg(\"No Ride name supplied to GetRideObject\", ride);\r\n      return null;\r\n    }\r\n\r\n    // prepend the park's class name to the ID to attempt to ensure uniqueness\r\n    var className = this.constructor.name;\r\n    if (ride.id.substr(0, className.length) !== className) {\r\n      ride.id = `${className}_${ride.id}`;\r\n    }\r\n\r\n    // check if we don't already have this ride in our data set\r\n    if (this[s_rideIDToIDXMap][ride.id] === undefined) {\r\n\r\n      // new ride! add to our set\r\n      var newRide = new Ride({\r\n        ride_id: ride.id,\r\n        ride_name: ride.name,\r\n      });\r\n\r\n      // add our new ride to our ride list and make an ID mapping\r\n      this.Rides.push(newRide);\r\n      this[s_rideIDToIDXMap][ride.id] = this.Rides.length - 1;\r\n    }\r\n\r\n    // else, don't worry about it, fail quietly\r\n    // return the already existing ride\r\n    return this.Rides[this[s_rideIDToIDXMap][ride.id]];\r\n  }\r\n\r\n  /**\r\n   * Set a new wait time for a ride\r\n   * @param {Object} ride - Ride data to apply\r\n   * @param {String} ride.id - Ride's ID\r\n   * @param {String} ride.name - Ride's name\r\n   * @param {Number} ride.wait_time - Ride's new wait time (set < 0 to signify inactive ride)\r\n   */\r\n  SetRideWaitTime(ride = {}) {\r\n    if (!ride) return this.Dbg(\"No Ride Data supplied\");\r\n    if (ride.id === undefined) return this.Dbg(\"No Ride ID supplied to SetRideWaitTime\", ride);\r\n    if (ride.name === undefined) return this.Dbg(\"No Ride name supplied to SetRideWaitTime\", ride);\r\n    if (ride.wait_time === undefined) return this.Dbg(\"No wait time supplied to SetRideWaitTime\", ride);\r\n\r\n    // set ride's new wait time\r\n    var rideObject = this.GetRideObject(ride);\r\n    rideObject.WaitTime = ride.wait_time;\r\n  }\r\n\r\n  /** \r\n   * Get waiting times for rides from this park\r\n   * @returns {Promise}\r\n   */\r\n  GetWaitTimesPromise() {\r\n    return new Promise(function(resolve, reject) {\r\n      // do we actually support wait times?\r\n      if (!this.SupportsWaitTimes) {\r\n        return reject(`${this.Name} doesn't support fetching wait times`);\r\n      }\r\n\r\n      // check our cache first\r\n      Settings.Cache.get(this[s_cacheKeyWaitTimes], function(err, ridedata) {\r\n        if (!err && ridedata) {\r\n          this.Log(`Cache hit for ${this[s_cacheKeyWaitTimes]}!`);\r\n\r\n          // we have ridedata from the cache! apply over our current ride data\r\n          for (var i = 0, ride; ride = ridedata[i++];) {\r\n            // restore ride state from cache\r\n            this.GetRideObject(ride).fromJSON(ride);\r\n          }\r\n\r\n          // make an array of all the ride states\r\n          var result = [];\r\n          for (var i = 0, ride; ride = this.Rides[i++];) {\r\n            result.push(ride.toJSON());\r\n          }\r\n          return resolve(result);\r\n        }\r\n\r\n        // cache missing key or the cached data has expired. Fetch new data!\r\n        this.FetchWaitTimes().then(function() {\r\n          // success! the this.Rides array should now be populated\r\n          //  cache the Rides array and return result\r\n          var result = [];\r\n          for (var i = 0, ride; ride = this.Rides[i++];) {\r\n            result.push(ride.toJSON());\r\n          }\r\n\r\n          Settings.Cache.set(this[s_cacheKeyWaitTimes], result, {\r\n            // either use the options.cacheWaitTimesLength or the default cache time length\r\n            ttl: this[s_cacheTimeWaitTimes] || Settings.DefaultCacheWaitTimesLength\r\n          }, function(err) {\r\n            if (err) {\r\n              // if we error, console out, but don't fail (still return data)\r\n              console.error(\"Error setting cache data for key \" + this[s_cacheKeyWaitTimes]);\r\n            }\r\n\r\n            // return wait time data\r\n            resolve(result);\r\n          });\r\n        }.bind(this), function(err) {\r\n          // failed to fetch wait times, reject Promise\r\n          return reject(`Error fetching park wait times: ${err}`);\r\n        }.bind(this));\r\n      }.bind(this));\r\n    }.bind(this));\r\n  }\r\n\r\n  /**\r\n   * Get this park's geolocation object\r\n   * @type {GeoLocation}\r\n   * */\r\n  get Location() {\r\n    return this[s_parkGeolocation];\r\n  }\r\n\r\n  /**\r\n   * Get this park's name in a human-readable form\r\n   * @type {String}\r\n   * */\r\n  get Name() {\r\n    return this[s_parkName];\r\n  }\r\n\r\n  /**\r\n   * Get this park's useragent string for making network requests\r\n   * This is usually randomly generated on object construction\r\n   * @type {String}\r\n   */\r\n  get UserAgent() {\r\n    return this[s_useragent];\r\n  }\r\n\r\n  /**\r\n   * Set this park's useragent\r\n   * Can set user agent to a defined string or use a generator function (see random-useragent library)\r\n   * @type {string|function} \r\n   */\r\n  set UserAgent(useragent = null) {\r\n    if (!useragent) throw new Error(\"No configuration passed to UserAgent setter\");\r\n\r\n    if (typeof(useragent) == \"function\") {\r\n      // generate a useragent using a generator function\r\n      this[s_useragent] = random_useragent.getRandom(useragent);\r\n    } else if (typeof(useragent) == \"string\") {\r\n      // set useragent using supplied static string\r\n      this[s_useragent] = useragent;\r\n    } else {\r\n      throw new Error(\"Must define either static user agent string or a generator function\");\r\n    }\r\n\r\n    this.Log(\"Set useragent to \" + this.UserAgent);\r\n  }\r\n\r\n  /**\r\n   * Get this park's Timezone\r\n   * @type {String}\r\n   * */\r\n  get Timezone() {\r\n    return this[s_parkTimezone];\r\n  }\r\n\r\n  /**\r\n   * Get park's current time\r\n   * @returns {string} Time as formatted by park's timeformat, or the default timeformat if set to null\r\n   * */\r\n  TimeNow({\r\n    timeFormat = null\r\n  } = {}) {\r\n    // take time right now, convert now into park's timezone and format it\r\n    //  format in preferred order of, manually passed in format, park's default time format, or global default time format\r\n    return moment().tz(this.Timezone).format(timeFormat || this[s_parkTimeFormat] || DefaultTimeFormat);\r\n  }\r\n\r\n  /**\r\n   * Does this park offer fast-pass services?\r\n   * @type {Boolean}\r\n   */\r\n  get FastPass() {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Does this park offer wait time information?\r\n   * @type {Boolean}\r\n   */\r\n  get SupportsWaitTimes() {\r\n    // base this logic solely on the presence of a function \"FetchWaitTimes\" existing\r\n    return this.FetchWaitTimes !== undefined;\r\n  }\r\n\r\n  /**\r\n   * Debug print a message (when NODE_DEBUG=themeparks is set in environment)\r\n   * @param {...*} ToPrint Objects/strings to print\r\n   * */\r\n  Log() {\r\n    return DebugLog(`${this.constructor.name}:`, ...arguments);\r\n  }\r\n\r\n  /**\r\n   * Setup park for offline tests. Each park should define URLs to intercept to provide offline unit tests.\r\n   * @returns {bool} Whether offline tests were successfully setup\r\n   */\r\n  SetupOfflineTests() {\r\n    // default park doesn't add any network overrides, implement this per-park\r\n\r\n    // return false by default, to ensure parks actually implement this\r\n    return false;\r\n  }\r\n}\r\n\r\n// export the Park class\r\nmodule.exports = Park;"]}