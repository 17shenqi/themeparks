{"version":3,"sources":["../lib/test.js"],"names":[],"mappings":";;AAAA,IAAI,SAAS,QAAQ,QAAR,CAAb;AACA,IAAI,OAAO,QAAQ,WAAR,CAAX;AACA,IAAI,WAAW,QAAQ,YAAR,CAAf;AACA,IAAI,QAAQ,QAAQ,SAAR,CAAZ;;AAEA;AACA,IAAI,YAAY,QAAQ,GAAR,CAAY,SAAZ,GAAwB,IAAxB,GAA+B,KAA/C;;AAEA,IAAI;AACF,UAAQ,GAAR,CAAY,8BAAZ;;AAEA;AACA,WAAS,+BAAT,EAA0C,YAAW;AACnD,QAAI,QAAJ;AACA,OAAG,8CAAH,EAAmD,UAAS,IAAT,EAAe;AAChE,UAAI;AACF,mBAAW,IAAI,IAAJ,EAAX;AACA,eAAO,QAAP,EAAiB,4CAAjB;AACD,OAHD,CAGE,OAAO,GAAP,EAAY;AACZ;AACD;AACF,KAPD;AAQD,GAVD;;AAYA;AACA,WAAS,qBAAT,EAAgC,YAAW;AACzC,OAAG,sDAAH,EAA2D,UAAS,IAAT,EAAe;AACxE,eAAS,KAAT,CAAe,GAAf,CAAmB,UAAnB,EAA+B,UAAS,GAAT,EAAc,IAAd,EAAoB;AACjD,eAAO,CAAC,GAAR,EAAa,2DAAb;AACA,eAAO,CAAC,IAAR,EAAc,6CAAd;AACA;AACD,OAJD;AAKD,KAND;;AAQA,OAAG,wDAAH,EAA6D,UAAS,IAAT,EAAe;AAC1E,eAAS,KAAT,CAAe,GAAf,CAAmB,UAAnB,EAA+B,MAA/B,EAAuC,YAAW;AAChD,iBAAS,KAAT,CAAe,GAAf,CAAmB,UAAnB,EAA+B,UAAS,GAAT,EAAc,IAAd,EAAoB;AACjD,iBAAO,CAAC,GAAR,EAAa,kDAAb;AACA,iBAAO,QAAQ,MAAf,EAAuB,8CAAvB;AACA;AACD,SAJD;AAKD,OAND;AAOD,KARD;AASD,GAlBD;AAoBD,CArCD,CAqCE,OAAO,GAAP,EAAY;AACZ,UAAQ,KAAR,CAAc,mBAAd;AACA,UAAQ,KAAR,CAAc,GAAd;AACA,UAAQ,IAAR,CAAa,CAAb;AACD","file":"test.js","sourcesContent":["var assert = require(\"assert\");\r\nvar Park = require(\"./park.js\");\r\nvar Settings = require(\"./settings\");\r\nvar Debug = require(\"./debug\");\r\n\r\n// optional environment variable to print out API results\r\nvar PRINTDATA = process.env.PRINTDATA ? true : false;\r\n\r\ntry {\r\n  console.log(\"Starting themeparks tests...\");\r\n\r\n  // test base park implementation doesn't implement anything invalid\r\n  describe(\"Test base park implementation\", function() {\r\n    var parkBase;\r\n    it(\"should not create the park base successfully\", function(done) {\r\n      try {\r\n        parkBase = new Park();\r\n        assert(parkBase, \"parkBase should not successfully construct\");\r\n      } catch (err) {\r\n        done();\r\n      }\r\n    });\r\n  });\r\n\r\n  // some caching tests\r\n  describe(\"Test caching module\", function() {\r\n    it(\"should not return valid data when no data is present\", function(done) {\r\n      Settings.Cache.get(\"cachekey\", function(err, data) {\r\n        assert(!err, \"Getting non-existant cache data shouldn't return an error\");\r\n        assert(!data, \"Cache returned data when it should not have\");\r\n        done();\r\n      });\r\n    });\r\n\r\n    it(\"should return valid data from cache after setting data\", function(done) {\r\n      Settings.Cache.set(\"cachekey\", \"data\", function() {\r\n        Settings.Cache.get(\"cachekey\", function(err, data) {\r\n          assert(!err, \"Getting set cache data shouldn't return an error\");\r\n          assert(data == \"data\", \"Cache didn't return data when it should have\");\r\n          done();\r\n        });\r\n      });\r\n    });\r\n  });\r\n\r\n} catch (err) {\r\n  console.error(\"Unit tests failed\")\r\n  console.error(err);\r\n  process.exit(1);\r\n}"]}