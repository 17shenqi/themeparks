{"version":3,"sources":["../lib/test.js"],"names":["assert","require","Park","Settings","themeparks","console","log","describe","parkBase","it","done","err","Cache","get","data","set","Array","isArray","AllParks","Parks","constructor","i","park","name","undefined","parkName","foundPark","error","process","exit"],"mappings":"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","file":"test.js","sourcesContent":["var assert = require(\"assert\");\r\nvar Park = require(\"./park.js\");\r\nvar Settings = require(\"./settings\");\r\nvar themeparks = require(\"./index\");\r\n\r\n// define Mocha functions for eslint\r\n/*global describe it*/\r\n\r\n// allow console for unit tests\r\n/* eslint-disable no-console */\r\n\r\ntry {\r\n    console.log(\"Starting themeparks tests...\");\r\n\r\n    // test base park implementation doesn't implement anything invalid\r\n    describe(\"Test base park implementation\", function() {\r\n        var parkBase;\r\n        it(\"should not create the park base successfully\", function(done) {\r\n            try {\r\n                parkBase = new Park();\r\n                assert(parkBase, \"parkBase should not successfully construct\");\r\n            } catch (err) {\r\n                done();\r\n            }\r\n        });\r\n    });\r\n\r\n    // some caching tests\r\n    describe(\"Test caching module\", function() {\r\n        it(\"should not return valid data when no data is present\", function(done) {\r\n            Settings.Cache.get(\"cachekey\", function(err, data) {\r\n                assert(!err, \"Getting non-existant cache data shouldn't return an error\");\r\n                assert(!data, \"Cache returned data when it should not have\");\r\n                done();\r\n            });\r\n        });\r\n\r\n        it(\"should return valid data from cache after setting data\", function(done) {\r\n            Settings.Cache.set(\"cachekey\", \"data\", function() {\r\n                Settings.Cache.get(\"cachekey\", function(err, data) {\r\n                    assert(!err, \"Getting set cache data shouldn't return an error\");\r\n                    assert(data == \"data\", \"Cache didn't return data when it should have\");\r\n                    done();\r\n                });\r\n            });\r\n        });\r\n    });\r\n\r\n    // test exposed parks are done correctly\r\n    describe(\"Test exposed parks are setup correctly\", function() {\r\n        it(\"should have an array of parks as .AllParks\", function() {\r\n            assert(Array.isArray(themeparks.AllParks), \".AllParks should be an array of all the parks available\");\r\n        });\r\n        it(\"should have an object of parks as .Parks\", function() {\r\n            assert(themeparks.Parks.constructor === {}.constructor, \".Parks should be an object of available parks\");\r\n        });\r\n\r\n        for (var i = 0, park; park = themeparks.AllParks[i++];) {\r\n            (function(park) {\r\n                it(`park .AllParks[${i}]{${park.name}} should have a corresponding .Parks entry`, function() {\r\n                    assert(themeparks.Parks[park.name] !== undefined, `park ${park.name} should have an entry called ${park.name} in .Parks`);\r\n                });\r\n            }(park));\r\n        }\r\n\r\n        for (var parkName in themeparks.Parks) {\r\n            (function(parkName) {\r\n                it(`park .Parks[${parkName}] should have a corresponding .AllParks entry`, function() {\r\n                    var foundPark = false;\r\n                    for (var i = 0, park; park = themeparks.AllParks[i++];) {\r\n                        if (park.name == parkName) {\r\n                            foundPark = true;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    assert(foundPark, `.AllParks should have a reference to ${parkName}`);\r\n                });\r\n            }(parkName));\r\n        }\r\n    });\r\n\r\n} catch (err) {\r\n    console.error(\"Unit tests failed\");\r\n    console.error(err);\r\n    process.exit(1);\r\n}\r\n\r\n/* eslint-enable no-console */"]}