{"version":3,"sources":["../lib/test.js"],"names":["assert","require","Park","Settings","Debug","themeparks","PRINTDATA","process","env","console","log","describe","parkBase","it","done","err","Cache","get","data","set","Array","isArray","AllParks","Parks","constructor","i","park","name","undefined","parkName","foundPark","error","exit"],"mappings":"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","file":"test.js","sourcesContent":["var assert = require(\"assert\");\r\nvar Park = require(\"./park.js\");\r\nvar Settings = require(\"./settings\");\r\nvar Debug = require(\"./debug\");\r\nvar themeparks = require(\"./index\");\r\n\r\n// optional environment variable to print out API results\r\nvar PRINTDATA = process.env.PRINTDATA ? true : false;\r\n\r\ntry {\r\n  console.log(\"Starting themeparks tests...\");\r\n\r\n  // test base park implementation doesn't implement anything invalid\r\n  describe(\"Test base park implementation\", function() {\r\n    var parkBase;\r\n    it(\"should not create the park base successfully\", function(done) {\r\n      try {\r\n        parkBase = new Park();\r\n        assert(parkBase, \"parkBase should not successfully construct\");\r\n      } catch (err) {\r\n        done();\r\n      }\r\n    });\r\n  });\r\n\r\n  // some caching tests\r\n  describe(\"Test caching module\", function() {\r\n    it(\"should not return valid data when no data is present\", function(done) {\r\n      Settings.Cache.get(\"cachekey\", function(err, data) {\r\n        assert(!err, \"Getting non-existant cache data shouldn't return an error\");\r\n        assert(!data, \"Cache returned data when it should not have\");\r\n        done();\r\n      });\r\n    });\r\n\r\n    it(\"should return valid data from cache after setting data\", function(done) {\r\n      Settings.Cache.set(\"cachekey\", \"data\", function() {\r\n        Settings.Cache.get(\"cachekey\", function(err, data) {\r\n          assert(!err, \"Getting set cache data shouldn't return an error\");\r\n          assert(data == \"data\", \"Cache didn't return data when it should have\");\r\n          done();\r\n        });\r\n      });\r\n    });\r\n  });\r\n\r\n  // test exposed parks are done correctly\r\n  describe(\"Test exposed parks are setup correctly\", function() {\r\n    it(\"should have an array of parks as .AllParks\", function() {\r\n      assert(Array.isArray(themeparks.AllParks), \".AllParks should be an array of all the parks available\");\r\n    });\r\n    it(\"should have an object of parks as .Parks\", function() {\r\n      assert(themeparks.Parks.constructor === {}.constructor, \".Parks should be an object of available parks\");\r\n    });\r\n\r\n    for(var i=0, park; park = themeparks.AllParks[i++];) {\r\n      (function(park){\r\n        it(`park .AllParks[${i}]{${park.name}} should have a corresponding .Parks entry`, function() {\r\n          assert(themeparks.Parks[ park.name ] !== undefined, `park ${park.name} should have an entry called ${park.name} in .Parks`);\r\n        })\r\n      }(park));\r\n    }\r\n\r\n    for(var parkName in themeparks.Parks) {\r\n      (function(parkName){\r\n        it(`park .Parks[${parkName}] should have a corresponding .AllParks entry`, function() {\r\n          var foundPark = false;\r\n          for(var i=0, park; park=themeparks.AllParks[i++];) {\r\n            if (park.name == parkName) {\r\n              foundPark = true;\r\n              break;\r\n            }\r\n          }\r\n\r\n          assert(foundPark, `.AllParks should have a reference to ${parkName}`);\r\n        })\r\n      }(parkName))\r\n    }\r\n  });\r\n\r\n} catch (err) {\r\n  console.error(\"Unit tests failed\")\r\n  console.error(err);\r\n  process.exit(1);\r\n}"]}