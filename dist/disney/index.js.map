{"version":3,"sources":["../../lib/disney/index.js"],"names":["Park","require","HTTP","Moment","random_useragent","Promise","Settings","cacheKey","s_disneyAPIResortID","Symbol","s_disneyAPIParkID","s_disneyAPIParkRegion","api_accessTokenURL","api_accessTokenURLBody","api_accessTokenURLMethod","api_appID","api_baseURL","api_userAgent","getRandom","ua","osName","WaltDisneyWorldPark","options","name","timezone","latitude","longitude","useragent","resort_id","Error","park_id","park_region","resolve","reject","Cache","get","err","accessToken","url","method","body","forceJSON","then","access_token","Log","expires_in","expiresIn","parseInt","set","ttl","bind","requestObject","GetAccessToken","headers","Authorization","Accept","Date","now","GetAPIUrl","FetchWaitTimesURL","data","region","waitTimeData","entries","i","ride","rideObject","GetRideObject","id","CleanRideID","WaitTime","waitTime","postedWaitMinutes","FastPass","fastpass","available","GetOpeningTimes","rangeStart","tz","Timezone","format","rangeEnd","add","FetchScheduleTimesURL","scheduleData","activities","schedule","scheduleID","j","scheduleTime","schedules","newScheduleData","date","timeZone","openingTime","startTime","closingTime","endTime","type","specialHours","WDWParkID","Schedule","SetDate","SetRideOpeningHours","APIBase","WDWResortID","regexTidyID","ride_id","capture","exec","length","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["\"use strict\";\r\n\r\n// base Disney World park objects\r\nvar Park = require(\"../park.js\");\r\n\r\n// HTTP library\r\nvar HTTP = require(\"../http\");\r\n\r\n// Moment date/time library\r\nvar Moment = require(\"moment-timezone\");\r\n\r\n// random useragent generator\r\nvar random_useragent = require(\"random-useragent\");\r\n\r\n// include our Promise library\r\nvar Promise = require(\"../promise\");\r\n\r\n// load user settings\r\nvar Settings = require(\"../settings\");\r\n// configure the Disney API's cache key\r\nvar cacheKey = \"disneyapi_\";\r\n\r\n// Disney API configuration keys\r\nvar s_disneyAPIResortID = Symbol();\r\nvar s_disneyAPIParkID = Symbol();\r\nvar s_disneyAPIParkRegion = Symbol();\r\n\r\n// API settings\r\nvar api_accessTokenURL = \"https://authorization.go.com/token\";\r\nvar api_accessTokenURLBody = \"grant_type=assertion&assertion_type=public&client_id=WDPRO-MOBILE.MDX.WDW.ANDROID-PROD\";\r\nvar api_accessTokenURLMethod = \"POST\";\r\nvar api_appID = \"WDW-MDX-ANDROID-3.4.1\";\r\nvar api_baseURL = \"https://api.wdpro.disney.go.com/\";\r\n\r\n// use the same user-agent for all WDW park requests\r\nvar api_userAgent = random_useragent.getRandom(function(ua) {\r\n    return (ua.osName == \"Android\");\r\n});\r\n\r\n/**\r\n * Implements the Walt Disney World API framework. All Disney parks use this one API.\r\n * @class\r\n * @extends Park\r\n */\r\nclass WaltDisneyWorldPark extends Park {\r\n    /**\r\n     * Create new WaltDisneyWorldPark Object.\r\n     * This object should not be called directly, but rather extended for each of the individual Disney parks\r\n     * @param {Object} options\r\n     * @param {String} options.resort_id Disney API resort ID\r\n     * @param {String} options.park_id Disney API park ID\r\n     * @param {String} options.park_region Disney API region ID\r\n     */\r\n    constructor(options = {}) {\r\n        options.name = options.name || \"Walt Disney World Resort\";\r\n        options.timezone = options.timezone || \"America/New_York\";\r\n\r\n        // set resort's general center point\r\n        options.latitude = options.latitude || 28.3852;\r\n        options.longitude = options.longitude || -81.5639;\r\n\r\n        // use our userAgent generated randomly on bootup\r\n        options.useragent = api_userAgent;\r\n\r\n        // inherit from base class\r\n        super(options);\r\n\r\n        // grab disney API configuration settings (or throw an error if value is missing/null)\r\n        if (!options.resort_id) throw new Error(\"Missing park's resort ID\");\r\n        this[s_disneyAPIResortID] = options.resort_id;\r\n        if (!options.park_id) throw new Error(\"Missing park's API ID\");\r\n        this[s_disneyAPIParkID] = options.park_id;\r\n        if (!options.park_region) throw new Error(\"Missing park's region\");\r\n        this[s_disneyAPIParkRegion] = options.park_region;\r\n    }\r\n\r\n    // override Fastpass Getter to declare support for FastPass\r\n    //  (all Disney parks offer Fastpass)\r\n    get FastPass() {\r\n        return true;\r\n    }\r\n\r\n    // override ride schedule getter to state this park supports ride schedules\r\n    get SupportsRideSchedules() {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Get our current access token\r\n     */\r\n    GetAccessToken() {\r\n        return new Promise(function(resolve, reject) {\r\n            // first, check the cache!\r\n            Settings.Cache.get(cacheKey + \"accesstoken\", function(err, accessToken) {\r\n                if (err || !accessToken) {\r\n                    // request a fresh access token\r\n                    HTTP({\r\n                        url: api_accessTokenURL,\r\n                        method: api_accessTokenURLMethod,\r\n                        body: api_accessTokenURLBody,\r\n                        // Disney API doesn't want to return as application/JSON, so we'll manually parse it into a nice object\r\n                        forceJSON: true\r\n                    }).then(function(body) {\r\n                        if (!body.access_token) {\r\n                            this.Log(\"Error body\", body);\r\n                            return reject(\"Returned access token data missing access_token\");\r\n                        }\r\n                        if (!body.expires_in) {\r\n                            this.Log(\"Error body\", body);\r\n                            return reject(\"Returned access token data missing expires_in\");\r\n                        }\r\n\r\n                        // parse expires_in into an int\r\n                        var expiresIn = parseInt(body.expires_in, 10);\r\n\r\n                        this.Log(`Fetched new WDW access_token ${body.access_token}, expires in ${body.expires_in}`);\r\n\r\n                        // store access token in cache\r\n                        Settings.Cache.set(cacheKey + \"accesstoken\", body.access_token, {\r\n                            ttl: expiresIn\r\n                        }, function() {\r\n                            // return our new access token\r\n                            return resolve(body.access_token);\r\n                        });\r\n                    }.bind(this), reject);\r\n                } else {\r\n                    // found cached access token! return it\r\n                    return resolve(accessToken);\r\n                }\r\n            }.bind(this));\r\n        }.bind(this)); // this ensures that the Promise remains in the scope of this object!\r\n    }\r\n\r\n    /**\r\n     * Fetch a URL from the Disney API\r\n     */\r\n    GetAPIUrl(requestObject) {\r\n        return new Promise(function(resolve, reject) {\r\n            // get access token\r\n            this.GetAccessToken().then(function(access_token) {\r\n                // TODO - build request object\r\n                // make sure headers exist if they weren't set already\r\n                if (!requestObject.headers) requestObject.headers = [];\r\n                requestObject.headers.Authorization = \"BEARER \" + access_token;\r\n                requestObject.headers.Accept = \"application/json;apiversion=1\";\r\n                requestObject.headers[\"X-Conversation-Id\"] = \"WDPRO-MOBILE.MDX.CLIENT-PROD\";\r\n                requestObject.headers[\"X-App-Id\"] = api_appID;\r\n                requestObject.headers[\"X-Correlation-ID\"] = Date.now();\r\n\r\n                // make sure we get JSON back\r\n                requestObject.forceJSON = true;\r\n\r\n                // send network request\r\n                HTTP(requestObject).then(resolve, reject);\r\n\r\n            }, reject);\r\n        }.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Fetch this Disney Park's waiting times\r\n     * @returns {Promise}\r\n     */\r\n    FetchWaitTimes() {\r\n        return new Promise(function(resolve, reject) {\r\n            this.GetAPIUrl({\r\n                url: this.FetchWaitTimesURL,\r\n                // pass in park region also\r\n                data: {\r\n                    region: this[s_disneyAPIParkRegion]\r\n                }\r\n            }).then(\r\n                // success!\r\n                function(waitTimeData) {\r\n                    // check we have some data\r\n                    if (!waitTimeData || !waitTimeData.entries) {\r\n                        this.Log(\"Error data\", waitTimeData || \"null\");\r\n                        return reject(\"Invalid data returned by WDW API for FetchWaitTimes\");\r\n                    }\r\n\r\n                    // apply each ride wait time\r\n                    for (var i = 0, ride; ride = waitTimeData.entries[i++];) {\r\n                        // skip any ride without a name, likely an invalid ride\r\n                        //  eg. the River Rogue Keelboats at DLP are dormant and invalid, but still have a ride object with no name\r\n                        if (!ride.name) {\r\n                            continue;\r\n                        }\r\n\r\n                        // get the ride object for this ride (will create it if it doesn't exist)\r\n                        var rideObject = this.GetRideObject({\r\n                            id: CleanRideID(ride.id),\r\n                            name: ride.name,\r\n                        });\r\n\r\n                        // set new wait time\r\n                        rideObject.WaitTime = ride.waitTime.postedWaitMinutes || -1;\r\n\r\n                        // set fastpass status\r\n                        rideObject.FastPass = (ride.waitTime && ride.waitTime.fastpass && ride.waitTime.fastpass.available) ? true : false;\r\n                    }\r\n\r\n                    // run get operating times to inject ride times into this data\r\n                    this.GetOpeningTimes().then(resolve, reject);\r\n                }.bind(this),\r\n                // error\r\n                reject\r\n            );\r\n        }.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Fetch this Disney Park's opening times\r\n     * @returns {Promise}\r\n     */\r\n    FetchOpeningTimes() {\r\n        return new Promise(function(resolve, reject) {\r\n            // get today's date and add on a month to get a decent range of dates\r\n            var rangeStart = Moment.tz(this.Timezone).format(\"YYYY-MM-DD\");\r\n            var rangeEnd = Moment.tz(this.Timezone).add(30, \"days\").format(\"YYYY-MM-DD\");\r\n\r\n            this.GetAPIUrl({\r\n                url: this.FetchScheduleTimesURL,\r\n                data: {\r\n                    \"filters\": \"theme-park,Attraction\",\r\n                    \"startDate\": rangeStart,\r\n                    \"endDate\": rangeEnd,\r\n                    \"region\": this[s_disneyAPIParkRegion]\r\n                }\r\n            }).then(function(scheduleData) {\r\n                if (!scheduleData || !scheduleData.activities) {\r\n                    this.Log(`Missing activities from ${scheduleData}`);\r\n                    return reject(\"Missing activities data from opening times API\");\r\n                }\r\n\r\n                // parse each schedule entry\r\n                for (var i = 0, schedule; schedule = scheduleData.activities[i++];) {\r\n                    // skip if we're missing valid schedule data\r\n                    if (!schedule.schedule) continue;\r\n\r\n                    var scheduleID = CleanRideID(schedule.id);\r\n                    for (var j = 0, scheduleTime; scheduleTime = schedule.schedule.schedules[j++];) {\r\n                        var newScheduleData = {\r\n                            date: Moment.tz(scheduleTime.date, \"YYYY-MM-DD\", schedule.timeZone || this.Timezone),\r\n                            openingTime: Moment.tz(`${scheduleTime.date}T${scheduleTime.startTime}`, \"YYYY-MM-DDTHH:mm:ss\", schedule.timeZone || this.Timezone),\r\n                            closingTime: Moment.tz(`${scheduleTime.date}T${scheduleTime.endTime}`, \"YYYY-MM-DDTHH:mm:ss\", schedule.timeZone || this.Timezone),\r\n                            type: scheduleTime.type,\r\n                            // work out if these are special hours or not\r\n                            specialHours: (scheduleTime.type != \"Operating\" && scheduleTime.type != \"Closed\" && scheduleTime.type != \"Refurbishment\"),\r\n                        };\r\n\r\n                        // check if we've found the actual park's schedule\r\n                        if (scheduleID == this.WDWParkID) {\r\n                            // apply data to our schedule\r\n                            this.Schedule.SetDate(newScheduleData);\r\n                        } else {\r\n                            // else, we must be a ride! (or event/parade or something)\r\n\r\n                            // add the current ride ID to the schedule data\r\n                            newScheduleData.id = scheduleID;\r\n\r\n                            // pass ride schedule times back to main class object\r\n                            this.SetRideOpeningHours(newScheduleData);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                resolve();\r\n            }.bind(this), reject);\r\n        }.bind(this));\r\n    }\r\n\r\n    /**\r\n     * The URL used to request this park's latest ride waiting times \r\n     * @type {String}\r\n     */\r\n    get FetchWaitTimesURL() {\r\n        // this is a separate function for any parks that need to override this\r\n        return `${this.APIBase}facility-service/theme-parks/${this.WDWParkID};destination\\u003d${this.WDWResortID}/wait-times`;\r\n    }\r\n\r\n    /**\r\n     * The URL used to request this park's schedule data\r\n     * @type {String}\r\n     */\r\n    get FetchScheduleTimesURL() {\r\n        return `${this.APIBase}mobile-service/public/ancestor-activities-schedules/${this.WDWResortID};entityType=destination`;\r\n    }\r\n\r\n    /**\r\n     * Get the API base URL for WDW parks\r\n     * @type {String}\r\n     */\r\n    get APIBase() {\r\n        return api_baseURL;\r\n    }\r\n\r\n    /**\r\n     * Get the internal WDW Park ID\r\n     * @type {String}\r\n     */\r\n    get WDWParkID() {\r\n        return this[s_disneyAPIParkID];\r\n    }\r\n\r\n    /**\r\n     * Get the internal WDW Resort ID\r\n     * @type {String}\r\n     */\r\n    get WDWResortID() {\r\n        return this[s_disneyAPIResortID];\r\n    }\r\n}\r\n\r\nvar regexTidyID = /^([^;]+)/;\r\n/**\r\n * Clean up a WDW ride id\r\n * IDs are usually in form [id];entityType=Attraction\r\n * This will tidy that up to just return the numeric ID portion at the start\r\n * @private\r\n */\r\nfunction CleanRideID(ride_id) {\r\n    var capture = regexTidyID.exec(ride_id);\r\n    if (capture && capture.length > 1) {\r\n        return capture[1];\r\n    }\r\n    return ride_id;\r\n}\r\n\r\n// export just the Base Disney Park class\r\nmodule.exports = WaltDisneyWorldPark;"]}