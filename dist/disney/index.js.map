{"version":3,"sources":["../../lib/disney/index.js"],"names":["Park","require","HTTP","Promise","Settings","cacheKey","s_disneyAPIResortID","Symbol","s_disneyAPIParkID","s_disneyAPIParkRegion","api_accessTokenURL","api_accessTokenURLBody","api_accessTokenURLMethod","api_appID","api_baseURL","WaltDisneyWorldPark","options","name","timezone","latitude","longitude","useragent","ua","osName","resort_id","Error","park_id","park_region","resolve","reject","Cache","get","err","accessToken","url","method","body","forceJSON","then","access_token","Log","expires_in","expiresIn","parseInt","set","ttl","bind","requestObject","GetAccessToken","headers","Authorization","Accept","Date","now","GetAPIUrl","FetchWaitTimesURL","data","region","waitTimeData","entries","i","ride","SetRideWaitTime","id","CleanRideID","wait_time","waitTime","postedWaitMinutes","APIBase","WDWParkID","WDWResortID","regexTidyID","ride_id","capture","exec","length","module","exports"],"mappings":"AAAA;;AAEA;;;;;;;;;;AACA,IAAIA,OAAOC,QAAQ,YAAR,CAAX;;AAEA;AACA,IAAIC,OAAOD,QAAQ,SAAR,CAAX;;AAEA;AACA,IAAIE,UAAUF,QAAQ,YAAR,CAAd;;AAEA;AACA,IAAIG,WAAWH,QAAQ,aAAR,CAAf;AACA;AACA,IAAII,WAAW,YAAf;;AAEA;AACA,IAAIC,sBAAsBC,QAA1B;AACA,IAAIC,oBAAoBD,QAAxB;AACA,IAAIE,wBAAwBF,QAA5B;;AAEA;AACA,IAAIG,qBAAqB,oCAAzB;AACA,IAAIC,yBAAyB,wFAA7B;AACA,IAAIC,2BAA2B,MAA/B;AACA,IAAIC,YAAY,uBAAhB;AACA,IAAIC,cAAc,mDAAlB;;AAEA;;;;;;IAKMC,mB;;;AACJ;;;;;;;;AAQA,iCAA0B;AAAA,QAAdC,OAAc,yDAAJ,EAAI;;AAAA;;AACxBA,YAAQC,IAAR,GAAeD,QAAQC,IAAR,IAAgB,0BAA/B;AACAD,YAAQE,QAAR,GAAmBF,QAAQE,QAAR,IAAoB,kBAAvC;;AAEA;AACAF,YAAQG,QAAR,GAAmBH,QAAQG,QAAR,IAAoB,OAAvC;AACAH,YAAQI,SAAR,GAAoBJ,QAAQI,SAAR,IAAqB,CAAC,OAA1C;;AAEA;AACAJ,YAAQK,SAAR,GAAoB,UAASC,EAAT,EAAa;AAC/B,aAAQA,GAAGC,MAAH,IAAa,SAArB;AACD,KAFD;;AAIA;;AAGA;AAhBwB,0IAclBP,OAdkB;;AAiBxB,QAAI,CAACA,QAAQQ,SAAb,EAAwB,MAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;AACxB,UAAKnB,mBAAL,IAA4BU,QAAQQ,SAApC;AACA,QAAI,CAACR,QAAQU,OAAb,EAAsB,MAAM,IAAID,KAAJ,CAAU,uBAAV,CAAN;AACtB,UAAKjB,iBAAL,IAA0BQ,QAAQU,OAAlC;AACA,QAAI,CAACV,QAAQW,WAAb,EAA0B,MAAM,IAAIF,KAAJ,CAAU,uBAAV,CAAN;AAC1B,UAAKhB,qBAAL,IAA8BO,QAAQW,WAAtC;AAtBwB;AAuBzB;;AAED;AACA;;;;;;;AAKA;;;qCAGiB;AACf,aAAO,IAAIxB,OAAJ,CAAY,UAASyB,OAAT,EAAkBC,MAAlB,EAA0B;AAC3C;AACAzB,iBAAS0B,KAAT,CAAeC,GAAf,CAAmB1B,WAAW,aAA9B,EAA6C,UAAS2B,GAAT,EAAcC,WAAd,EAA2B;AACtE,cAAID,OAAO,CAACC,WAAZ,EAAyB;AACvB;AACA/B,iBAAK;AACHgC,mBAAKxB,kBADF;AAEHyB,sBAAQvB,wBAFL;AAGHwB,oBAAMzB,sBAHH;AAIH;AACA0B,yBAAW;AALR,aAAL,EAMGC,IANH,CAMQ,UAASF,IAAT,EAAe;AACrB,kBAAI,CAACA,KAAKG,YAAV,EAAwB;AACtB,qBAAKC,GAAL,CAAS,YAAT,EAAuBJ,IAAvB;AACA,uBAAOP,OAAO,iDAAP,CAAP;AACD;AACD,kBAAI,CAACO,KAAKK,UAAV,EAAsB;AACpB,qBAAKD,GAAL,CAAS,YAAT,EAAuBJ,IAAvB;AACA,uBAAOP,OAAO,+CAAP,CAAP;AACD;;AAED;AACA,kBAAIa,YAAYC,SAASP,KAAKK,UAAd,EAA0B,EAA1B,CAAhB;;AAEA,mBAAKD,GAAL,mCAAyCJ,KAAKG,YAA9C,qBAA0EH,KAAKK,UAA/E;;AAEA;AACArC,uBAAS0B,KAAT,CAAec,GAAf,CAAmBvC,WAAW,aAA9B,EAA6C+B,KAAKG,YAAlD,EAAgE;AAC9DM,qBAAKH;AADyD,eAAhE,EAEG,YAAW;AACZ;AACA,uBAAOd,QAAQQ,KAAKG,YAAb,CAAP;AACD,eALD;AAMD,aAtBO,CAsBNO,IAtBM,CAsBD,IAtBC,CANR,EA4BcjB,MA5Bd;AA6BD,WA/BD,MA+BO;AACL;AACA,mBAAOD,QAAQK,WAAR,CAAP;AACD;AACF,SApC4C,CAoC3Ca,IApC2C,CAoCtC,IApCsC,CAA7C;AAqCD,OAvCkB,CAuCjBA,IAvCiB,CAuCZ,IAvCY,CAAZ,CAAP,CADe,CAwCA;AAChB;;AAED;;;;;;8BAGUC,a,EAAe;AACvB,aAAO,IAAI5C,OAAJ,CAAY,UAASyB,OAAT,EAAkBC,MAAlB,EAA0B;AAC3C;AACA,aAAKmB,cAAL,GAAsBV,IAAtB,CAA2B,UAASC,YAAT,EAAuB;AAChD;AACA;AACA,cAAI,CAACQ,cAAcE,OAAnB,EAA4BF,cAAcE,OAAd,GAAwB,EAAxB;AAC5BF,wBAAcE,OAAd,CAAsBC,aAAtB,GAAsC,YAAYX,YAAlD;AACAQ,wBAAcE,OAAd,CAAsBE,MAAtB,GAA+B,+BAA/B;AACAJ,wBAAcE,OAAd,CAAsB,mBAAtB,IAA6C,8BAA7C;AACAF,wBAAcE,OAAd,CAAsB,UAAtB,IAAoCpC,SAApC;AACAkC,wBAAcE,OAAd,CAAsB,kBAAtB,IAA4CG,KAAKC,GAAL,EAA5C;;AAEA;AACAN,wBAAcV,SAAd,GAA0B,IAA1B;;AAEA;AACAnC,eAAK6C,aAAL,EAAoBT,IAApB,CAAyBV,OAAzB,EAAkCC,MAAlC;AAED,SAhBD,EAgBGA,MAhBH;AAiBD,OAnBkB,CAmBjBiB,IAnBiB,CAmBZ,IAnBY,CAAZ,CAAP;AAoBD;;AAED;;;;;;;qCAIiB;AACf,aAAO,IAAI3C,OAAJ,CAAY,UAASyB,OAAT,EAAkBC,MAAlB,EAA0B;AAC3C,aAAKyB,SAAL,CAAe;AACbpB,eAAK,KAAKqB,iBADG;AAEb;AACAC,gBAAM;AACJC,oBAAQ,KAAKhD,qBAAL;AADJ;AAHO,SAAf,EAMG6B,IANH;AAOE;AACA,kBAASoB,YAAT,EAAuB;AACrB;AACA,cAAI,CAACA,YAAD,IAAiB,CAACA,aAAaC,OAAnC,EAA4C;AAC1C,iBAAKnB,GAAL,CAAS,YAAT,EAAuBkB,gBAAgB,MAAvC;AACA,mBAAO7B,OAAO,qDAAP,CAAP;AACD;;AAED;AACA,eAAK,IAAI+B,IAAI,CAAR,EAAWC,IAAhB,EAAsBA,OAAOH,aAAaC,OAAb,CAAqBC,GAArB,CAA7B,GAAyD;AACvD,iBAAKE,eAAL,CAAqB;AACnB;AACAC,kBAAIC,YAAYH,KAAKE,EAAjB,CAFe;AAGnB9C,oBAAM4C,KAAK5C,IAAL,IAAa,KAHA;AAInB;AACAgD,yBAAWJ,KAAKK,QAAL,CAAcC,iBAAd,IAAmC,CAAC;AAL5B,aAArB;AAOD;;AAED;AACA,iBAAOvC,SAAP;AACD,SApBD,CAoBEkB,IApBF,CAoBO,IApBP,CARF;AA6BE;AACAjB,cA9BF;AAgCD,OAjCkB,CAiCjBiB,IAjCiB,CAiCZ,IAjCY,CAAZ,CAAP;AAkCD;;AAED;;;;;;;wBArHe;AACb,aAAO,IAAP;AACD;;;wBAuHuB;AACtB;AACA,aAAU,KAAKsB,OAAf,oBAAqC,KAAKC,SAA1C,qBAAwE,KAAKC,WAA7E;AACD;;AAED;;;;;;;wBAIc;AACZ,aAAOxD,WAAP;AACD;;AAED;;;;;;;wBAIgB;AACd,aAAO,KAAKN,iBAAL,CAAP;AACD;;AAED;;;;;;;wBAIkB;AAChB,aAAO,KAAKF,mBAAL,CAAP;AACD;;;;EAxL+BN,I;;AA2LlC,IAAIuE,cAAc,UAAlB;AACA;;;;;;AAMA,SAASP,WAAT,CAAqBQ,OAArB,EAA8B;AAC5B,MAAIC,UAAUF,YAAYG,IAAZ,CAAiBF,OAAjB,CAAd;AACA,MAAIC,WAAWA,QAAQE,MAAR,GAAiB,CAAhC,EAAmC;AACjC,WAAOF,QAAQ,CAAR,CAAP;AACD;AACD,SAAOD,OAAP;AACD;;AAED;AACAI,OAAOC,OAAP,GAAiB9D,mBAAjB","file":"index.js","sourcesContent":["\"use strict\";\r\n\r\n// base Disney World park objects\r\nvar Park = require(\"../park.js\");\r\n\r\n// HTTP library\r\nvar HTTP = require(\"../http\");\r\n\r\n// include our Promise library\r\nvar Promise = require(\"../promise\");\r\n\r\n// load user settings\r\nvar Settings = require(\"../settings\");\r\n// configure the Disney API's cache key\r\nvar cacheKey = \"disneyapi_\";\r\n\r\n// Disney API configuration keys\r\nvar s_disneyAPIResortID = Symbol();\r\nvar s_disneyAPIParkID = Symbol();\r\nvar s_disneyAPIParkRegion = Symbol();\r\n\r\n// API settings\r\nvar api_accessTokenURL = \"https://authorization.go.com/token\";\r\nvar api_accessTokenURLBody = \"grant_type=assertion&assertion_type=public&client_id=WDPRO-MOBILE.MDX.WDW.ANDROID-PROD\";\r\nvar api_accessTokenURLMethod = \"POST\";\r\nvar api_appID = \"WDW-MDX-ANDROID-3.4.1\";\r\nvar api_baseURL = \"https://api.wdpro.disney.go.com/facility-service/\";\r\n\r\n/**\r\n * Implements the Walt Disney World API framework. All Disney parks use this one API.\r\n * @class\r\n * @extends Park\r\n */\r\nclass WaltDisneyWorldPark extends Park {\r\n  /**\r\n   * Create new WaltDisneyWorldPark Object.\r\n   * This object should not be called directly, but rather extended for each of the individual Disney parks\r\n   * @param {Object} options\r\n   * @param {String} options.resort_id Disney API resort ID\r\n   * @param {String} options.park_id Disney API park ID\r\n   * @param {String} options.park_region Disney API region ID\r\n   */\r\n  constructor(options = {}) {\r\n    options.name = options.name || \"Walt Disney World Resort\";\r\n    options.timezone = options.timezone || \"America/New_York\";\r\n\r\n    // set resort's general center point\r\n    options.latitude = options.latitude || 28.3852;\r\n    options.longitude = options.longitude || -81.5639;\r\n\r\n    // create a random Android useragent for use with the Disney API\r\n    options.useragent = function(ua) {\r\n      return (ua.osName == \"Android\");\r\n    };\r\n\r\n    // inherit from base class\r\n    super(options);\r\n\r\n    // grab disney API configuration settings (or throw an error if value is missing/null)\r\n    if (!options.resort_id) throw new Error(\"Missing park's resort ID\");\r\n    this[s_disneyAPIResortID] = options.resort_id;\r\n    if (!options.park_id) throw new Error(\"Missing park's API ID\");\r\n    this[s_disneyAPIParkID] = options.park_id;\r\n    if (!options.park_region) throw new Error(\"Missing park's region\");\r\n    this[s_disneyAPIParkRegion] = options.park_region;\r\n  }\r\n\r\n  // override Fastpass Getter to declare support for FastPass\r\n  //  (all Disney parks offer Fastpass)\r\n  get FastPass() {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Get our current access token\r\n   */\r\n  GetAccessToken() {\r\n    return new Promise(function(resolve, reject) {\r\n      // first, check the cache!\r\n      Settings.Cache.get(cacheKey + \"accesstoken\", function(err, accessToken) {\r\n        if (err || !accessToken) {\r\n          // request a fresh access token\r\n          HTTP({\r\n            url: api_accessTokenURL,\r\n            method: api_accessTokenURLMethod,\r\n            body: api_accessTokenURLBody,\r\n            // Disney API doesn't want to return as application/JSON, so we'll manually parse it into a nice object\r\n            forceJSON: true\r\n          }).then(function(body) {\r\n            if (!body.access_token) {\r\n              this.Log(\"Error body\", body);\r\n              return reject(\"Returned access token data missing access_token\");\r\n            }\r\n            if (!body.expires_in) {\r\n              this.Log(\"Error body\", body);\r\n              return reject(\"Returned access token data missing expires_in\");\r\n            }\r\n\r\n            // parse expires_in into an int\r\n            var expiresIn = parseInt(body.expires_in, 10);\r\n\r\n            this.Log(`Fetched new WDW access_token ${body.access_token}, expires in ${body.expires_in}`);\r\n\r\n            // store access token in cache\r\n            Settings.Cache.set(cacheKey + \"accesstoken\", body.access_token, {\r\n              ttl: expiresIn\r\n            }, function() {\r\n              // return our new access token\r\n              return resolve(body.access_token);\r\n            });\r\n          }.bind(this), reject);\r\n        } else {\r\n          // found cached access token! return it\r\n          return resolve(accessToken);\r\n        }\r\n      }.bind(this));\r\n    }.bind(this)); // this ensures that the Promise remains in the scope of this object!\r\n  }\r\n\r\n  /**\r\n   * Fetch a URL from the Disney API\r\n   */\r\n  GetAPIUrl(requestObject) {\r\n    return new Promise(function(resolve, reject) {\r\n      // get access token\r\n      this.GetAccessToken().then(function(access_token) {\r\n        // TODO - build request object\r\n        // make sure headers exist if they weren't set already\r\n        if (!requestObject.headers) requestObject.headers = [];\r\n        requestObject.headers.Authorization = \"BEARER \" + access_token;\r\n        requestObject.headers.Accept = 'application/json;apiversion=1';\r\n        requestObject.headers['X-Conversation-Id'] = 'WDPRO-MOBILE.MDX.CLIENT-PROD';\r\n        requestObject.headers['X-App-Id'] = api_appID;\r\n        requestObject.headers['X-Correlation-ID'] = Date.now();\r\n\r\n        // make sure we get JSON back\r\n        requestObject.forceJSON = true;\r\n\r\n        // send network request\r\n        HTTP(requestObject).then(resolve, reject);\r\n\r\n      }, reject);\r\n    }.bind(this));\r\n  }\r\n\r\n  /**\r\n   * Fetch this Disney Park's waiting times\r\n   * @returns {Promise}\r\n   */\r\n  FetchWaitTimes() {\r\n    return new Promise(function(resolve, reject) {\r\n      this.GetAPIUrl({\r\n        url: this.FetchWaitTimesURL,\r\n        // pass in park region also\r\n        data: {\r\n          region: this[s_disneyAPIParkRegion]\r\n        }\r\n      }).then(\r\n        // success!\r\n        function(waitTimeData) {\r\n          // check we have some data\r\n          if (!waitTimeData || !waitTimeData.entries) {\r\n            this.Log(\"Error data\", waitTimeData || \"null\");\r\n            return reject(\"Invalid data returned by WDW API for FetchWaitTimes\");\r\n          }\r\n\r\n          // apply each ride wait time\r\n          for (var i = 0, ride; ride = waitTimeData.entries[i++];) {\r\n            this.SetRideWaitTime({\r\n              // WDW API ride IDs are weird, clean them up first\r\n              id: CleanRideID(ride.id),\r\n              name: ride.name || \"???\",\r\n              // if no wait minutes are available, return -1\r\n              wait_time: ride.waitTime.postedWaitMinutes || -1,\r\n            });\r\n          }\r\n\r\n          // resolve successfully!\r\n          return resolve();\r\n        }.bind(this),\r\n        // error\r\n        reject\r\n      );\r\n    }.bind(this));\r\n  }\r\n\r\n  /**\r\n   * The URL used to request this park's latest ride waiting times \r\n   * @type {String}\r\n   */\r\n  get FetchWaitTimesURL() {\r\n    // this is a separate function for any parks that need to override this\r\n    return `${this.APIBase}theme-parks/${this.WDWParkID};destination\\u003d${this.WDWResortID}/wait-times`;\r\n  }\r\n\r\n  /**\r\n   * Get the API base URL for WDW parks\r\n   * @type {String}\r\n   */\r\n  get APIBase() {\r\n    return api_baseURL;\r\n  }\r\n\r\n  /**\r\n   * Get the internal WDW Park ID\r\n   * @type {String}\r\n   */\r\n  get WDWParkID() {\r\n    return this[s_disneyAPIParkID];\r\n  }\r\n\r\n  /**\r\n   * Get the internal WDW Resort ID\r\n   * @type {String}\r\n   */\r\n  get WDWResortID() {\r\n    return this[s_disneyAPIResortID];\r\n  }\r\n}\r\n\r\nvar regexTidyID = /^([^;]+)/;\r\n/**\r\n * Clean up a WDW ride id\r\n * IDs are usually in form [id];entityType=Attraction\r\n * This will tidy that up to just return the numeric ID portion at the start\r\n * @private\r\n */\r\nfunction CleanRideID(ride_id) {\r\n  var capture = regexTidyID.exec(ride_id);\r\n  if (capture && capture.length > 1) {\r\n    return capture[1];\r\n  }\r\n  return ride_id;\r\n};\r\n\r\n// export just the Base Disney Park class\r\nmodule.exports = WaltDisneyWorldPark;"]}