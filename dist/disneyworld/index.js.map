{"version":3,"sources":["../../lib/disneyworld/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["\"use strict\";\r\n\r\n// base Disney World park objects\r\nvar Park = require(\"../park.js\");\r\n\r\n// HTTP library\r\nvar HTTP = require(\"../http\");\r\n\r\n// load user settings\r\nvar Settings = require(\"../settings\");\r\n// configure the Disney API's cache key\r\nvar cacheKey = \"disneyapi_\";\r\n\r\n// Disney API configuration keys\r\nvar s_disneyAPIResortID = Symbol();\r\nvar s_disneyAPIParkID = Symbol();\r\nvar s_disneyAPIParkRegion = Symbol();\r\n\r\n// API settings\r\nvar api_accessTokenURL = \"https://authorization.go.com/token\";\r\nvar api_accessTokenURLBody = \"grant_type=assertion&assertion_type=public&client_id=WDPRO-MOBILE.MDX.WDW.ANDROID-PROD\";\r\nvar api_accessTokenURLMethod = \"POST\";\r\nvar api_appID = \"WDW-MDX-ANDROID-3.4.1\";\r\nvar api_baseURL = \"https://api.wdpro.disney.go.com/facility-service/\";\r\n\r\n/**\r\n * Implements the Walt Disney World API framework. All Disney parks use this one API.\r\n * @class\r\n * @extends Park\r\n */\r\nclass WaltDisneyWorldPark extends Park {\r\n  /**\r\n   * Create new WaltDisneyWorldPark Object.\r\n   * This object should not be called directly, but rather extended for each of the individual Disney parks\r\n   * @param {Object} options\r\n   * @param {String} options.resort_id Disney API resort ID\r\n   * @param {String} options.park_id Disney API park ID\r\n   * @param {String} options.park_region Disney API region ID\r\n   */\r\n  constructor(options = {}) {\r\n    options.name = options.name || \"Walt Disney World Resort\";\r\n    options.timezone = options.timezone || \"America/New_York\";\r\n\r\n    // set resort's general center point\r\n    options.latitude = options.latitude || 28.3852;\r\n    options.longitude = options.longitude || -81.5639;\r\n\r\n    // create a random Android useragent for use with the Disney API\r\n    options.useragent = function(ua) {\r\n      return (ua.osName == \"Android\");\r\n    };\r\n\r\n    // inherit from base class\r\n    super(options);\r\n\r\n    // grab disney API configuration settings (or throw an error if value is missing/null)\r\n    if (!options.resort_id) throw new Error(\"Missing park's resort ID\");\r\n    this[s_disneyAPIResortID] = options.resort_id;\r\n    if (!options.park_id) throw new Error(\"Missing park's API ID\");\r\n    this[s_disneyAPIParkID] = options.park_id;\r\n    if (!options.park_region) throw new Error(\"Missing park's region\");\r\n    this[s_disneyAPIParkRegion] = options.park_region;\r\n  }\r\n\r\n  // override Fastpass Getter to declare support for FastPass\r\n  //  (all Disney parks offer Fastpass)\r\n  get FastPass() {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Get our current access token\r\n   */\r\n  GetAccessToken() {\r\n    return new Promise(function(resolve, reject) {\r\n      // first, check the cache!\r\n      Settings.Cache.get(cacheKey + \"accesstoken\", function(err, accessToken) {\r\n        if (err || !accessToken) {\r\n          // request a fresh access token\r\n          HTTP({\r\n            url: api_accessTokenURL,\r\n            method: api_accessTokenURLMethod,\r\n            body: api_accessTokenURLBody,\r\n            // Disney API doesn't want to return as application/JSON, so we'll manually parse it into a nice object\r\n            forceJSON: true\r\n          }).then(function(body) {\r\n            if (!body.access_token) {\r\n              this.Log(\"Error body\", body);\r\n              return reject(\"Returned access token data missing access_token\");\r\n            }\r\n            if (!body.expires_in) {\r\n              this.Log(\"Error body\", body);\r\n              return reject(\"Returned access token data missing expires_in\");\r\n            }\r\n\r\n            // parse expires_in into an int\r\n            var expiresIn = parseInt(body.expires_in, 10);\r\n\r\n            this.Log(`Fetched new WDW access_token ${body.access_token}, expires in ${body.expires_in}`);\r\n\r\n            // store access token in cache\r\n            Settings.Cache.set(cacheKey + \"accesstoken\", body.access_token, {\r\n              ttl: expiresIn\r\n            }, function() {\r\n              // return our new access token\r\n              return resolve(body.access_token);\r\n            });\r\n          }.bind(this), reject);\r\n        } else {\r\n          // found cached access token! return it\r\n          return resolve(accessToken);\r\n        }\r\n      }.bind(this));\r\n    }.bind(this)); // this ensures that the Promise remains in the scope of this object!\r\n  }\r\n\r\n  /**\r\n   * Fetch a URL from the Disney API\r\n   */\r\n  GetAPIUrl(requestObject) {\r\n    return new Promise(function(resolve, reject) {\r\n      // get access token\r\n      this.GetAccessToken().then(function(access_token) {\r\n        // TODO - build request object\r\n        // make sure headers exist if they weren't set already\r\n        if (!requestObject.headers) requestObject.headers = [];\r\n        requestObject.headers.Authorization = \"BEARER \" + access_token;\r\n        requestObject.headers.Accept = 'application/json;apiversion=1';\r\n        requestObject.headers['X-Conversation-Id'] = 'WDPRO-MOBILE.MDX.CLIENT-PROD';\r\n        requestObject.headers['X-App-Id'] = api_appID;\r\n        requestObject.headers['X-Correlation-ID'] = Date.now();\r\n\r\n        // make sure we get JSON back\r\n        requestObject.forceJSON = true;\r\n\r\n        // send network request\r\n        HTTP(requestObject).then(resolve, reject);\r\n\r\n      }, reject);\r\n    }.bind(this));\r\n  }\r\n\r\n  /**\r\n   * Fetch this Disney Park's waiting times\r\n   * @returns {Promise}\r\n   */\r\n  FetchWaitTimes() {\r\n    return new Promise(function(resolve, reject) {\r\n      this.GetAPIUrl({\r\n        url: this.FetchWaitTimesURL\r\n      }).then(\r\n        // success!\r\n        function(waitTimeData) {\r\n          // check we have some data\r\n          if (!waitTimeData || !waitTimeData.entries) {\r\n            return reject(\"Invalid data returned by WDW API for FetchWaitTimes\");\r\n          }\r\n\r\n          // apply each ride wait time\r\n          for (var i = 0, ride; ride = waitTimeData.entries[i++];) {\r\n            this.SetRideWaitTime({\r\n              // WDW API ride IDs are weird, clean them up first\r\n              id: CleanRideID(ride.id),\r\n              name: ride.name || \"???\",\r\n              // if no wait minutes are available, return -1\r\n              wait_time: ride.waitTime.postedWaitMinutes || -1,\r\n            });\r\n          }\r\n\r\n          // resolve successfully!\r\n          return resolve();\r\n        }.bind(this),\r\n        // error\r\n        reject\r\n      );\r\n    }.bind(this));\r\n  }\r\n\r\n  /**\r\n   * The URL used to request this park's latest ride waiting times \r\n   * @type {String}\r\n   */\r\n  get FetchWaitTimesURL() {\r\n    // this is a separate function for any parks that need to override this\r\n    return `${api_baseURL}theme-parks/${this[s_disneyAPIParkID]};destination\\u003d${this[s_disneyAPIResortID]}/wait-times?region=${this[s_disneyAPIParkRegion]}`;\r\n  }\r\n}\r\n\r\nvar regexTidyID = /^([^;]+)/;\r\n/**\r\n * Clean up a WDW ride id\r\n * IDs are usually in form [id];entityType=Attraction\r\n * This will tidy that up to just return the numeric ID portion at the start\r\n * @private\r\n */\r\nfunction CleanRideID(ride_id) {\r\n  var capture = regexTidyID.exec(ride_id);\r\n  if (capture && capture.length > 1) {\r\n    return capture[1];\r\n  }\r\n  return ride_id;\r\n};\r\n\r\n// export just the Base Disney Park class\r\nmodule.exports = WaltDisneyWorldPark;"]}