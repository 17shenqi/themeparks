{"version":3,"sources":["../lib/http.js"],"names":[],"mappings":"AAAA;;AAEA;AACA;;AAEA,IAAI,UAAU,QAAQ,SAAR,CAAd;;AAEA;AACA,IAAI,QAAQ,QAAQ,SAAR,CAAZ;AACA,IAAI,UAAU,MAAM,OAApB;AACA,IAAI,MAAM,QAAQ,cAAR,CAAV;;AAEA;;;;;AAKA,SAAS,WAAT,CAAqB,cAArB,EAAqC;AACjC,QAAI,UAAU,MAAV,IAAoB,CAAxB,EAA2B;AACvB,eAAO,QAAQ,MAAR,CAAe,4DAAf,CAAP;AACH;;AAED;AACA,+BAAyB,eAAe,GAAxC;;AAEA;AACA,QAAI,UAAU,eAAe,OAAf,IAA0B,CAAxC;AACA;AACA,WAAO,eAAe,OAAtB;;AAEA;AACA,QAAI,aAAa,eAAe,UAAf,IAA6B,IAA9C;AACA,WAAO,eAAe,UAAtB;;AAEA;AACA,QAAI,qBAAqB,eAAe,kBAAf,IAAqC,KAA9D;AACA,WAAO,eAAe,kBAAtB;;AAEA;AACA,QAAI,YAAY,eAAe,SAAf,IAA4B,KAA5C;AACA,WAAO,eAAe,SAAtB;;AAEA;AACA,WAAO,IAAI,OAAJ,CAAY,UAAS,OAAT,EAAkB,MAAlB,EAA0B;AACzC,YAAI,UAAU,CAAd;;AAEA;AACA,YAAI,iBAAiB,SAAjB,cAAiB,GAAW;AAC5B;AACA,oBAAQ,cAAR,EAAwB,UAAS,GAAT,EAAc,IAAd,EAAoB,IAApB,EAA0B;AAC9C,oBAAI,GAAJ,EAAS;AACL,wBAAI,UAAU,OAAd,EAAuB;AACnB;AACA;AACA,gEAAsC,OAAtC,SAAiD,OAAjD,iBAAoE,eAAe,GAAnF;AACA,4BAAI,GAAJ;;AAEA;AACA,mCAAW,cAAX,EAA2B,UAA3B;AACA;AACH,qBATD,MASO;AACH,+BAAO,OAAO,GAAP,CAAP;AACH;AACJ;;AAED;AACA,oBAAI,kBAAJ,EAAwB;AACpB,mEAA6C,eAAe,GAA5D;AACA,2BAAO,QAAQ,IAAR,CAAP;AACH,iBAHD,MAGO;AACH,wBAAI,SAAJ,EAAe;AACX,4BAAI,QAAJ;AACA,4BAAI;AACA,uCAAW,KAAK,KAAL,CAAW,IAAX,CAAX;AACH,yBAFD,CAEE,OAAO,CAAP,EAAU;AACR,mCAAO,4BAA0B,IAA1B,6BAAsD,CAAtD,CAAP;AACH;AACD,uFAA6D,eAAe,GAA5E;AACA,+BAAO,QAAQ,QAAR,CAAP;AACH,qBATD,MASO;AACH,mEAAyC,eAAe,GAAxD;AACA,+BAAO,QAAQ,IAAR,CAAP;AACH;AACJ;AACJ,aAnCD;AAoCH,SAtCD;;AAwCA;AACA,gBAAQ,QAAR,CAAiB,cAAjB;AACH,KA9CkB,CA8CjB,IA9CiB,CA8CZ,IA9CY,CAAZ,CAAP;AA+CH;;AAED,OAAO,OAAP,GAAiB,WAAjB","file":"http.js","sourcesContent":["\"use strict\";\r\n\r\n// this is a basic wrapper for making Request() requests\r\n//  we wrap this so we can have the same debug information for all requests\r\n\r\nvar request = require(\"request\");\r\n\r\n// detect if we're in debug mode\r\nvar Debug = require(\"./debug\");\r\nvar IsDebug = Debug.IsDebug;\r\nvar Log = require(\"./debugPrint\");\r\n\r\n/**\r\n * Make a network request\r\n * @private\r\n * @param parameters to pass to request library\r\n */\r\nfunction MakeRequest(networkRequest) {\r\n    if (arguments.length != 1) {\r\n        return Promise.reject(\"HTTP requires 1 argument. The network object configuration\");\r\n    }\r\n\r\n    // debug log if we're in debug mode\r\n    Log(`Making request to ${networkRequest.url}`);\r\n\r\n    // build-in retires into this wrapper (default 3)\r\n    var retries = networkRequest.retries || 3;\r\n    // un-set retries in-case request suddenly supports this or something!\r\n    delete networkRequest.retries;\r\n\r\n    // default delay of 2 seconds for each retry attempt\r\n    var retryDelay = networkRequest.retryDelay || 2000;\r\n    delete networkRequest.retryDelay;\r\n\r\n    // we will default to returning the body, but can return the full response object if we want\r\n    var returnFullResponse = networkRequest.returnFullResponse || false;\r\n    delete networkRequest.returnFullResponse;\r\n\r\n    // add ability to force responses into JSON objects, even if they don't return application/json content header\r\n    var forceJSON = networkRequest.forceJSON || false;\r\n    delete networkRequest.forceJSON;\r\n\r\n    // return result as a Promise!\r\n    return new Promise(function(resolve, reject) {\r\n        var attempt = 0;\r\n\r\n        // make request in an anonymouse function so we can make multiple requests to it easily\r\n        var attemptRequest = function() {\r\n            // pass all arguments after the first to request\r\n            request(networkRequest, function(err, resp, body) {\r\n                if (err) {\r\n                    if (attempt < retries) {\r\n                        // if we have retires left, try again!\r\n                        attempt++;\r\n                        Log(`Network request failed attempt ${attempt}/${retries} for URL ${networkRequest.url}`);\r\n                        Log(err);\r\n\r\n                        // try again after retryDelay milliseconds\r\n                        setTimeout(attemptRequest, retryDelay);\r\n                        return;\r\n                    } else {\r\n                        return reject(err);\r\n                    }\r\n                }\r\n\r\n                // no error! return the result\r\n                if (returnFullResponse) {\r\n                    Log(`Successfully fetched response for URL ${networkRequest.url}`);\r\n                    return resolve(resp);\r\n                } else {\r\n                    if (forceJSON) {\r\n                        var JSONData;\r\n                        try {\r\n                            JSONData = JSON.parse(body);\r\n                        } catch (e) {\r\n                            return reject(`Unable to parse ${body} into a JSON object: ${e}`);\r\n                        }\r\n                        Log(`Successfully fetched and parsed JSON from response at ${networkRequest.url}`);\r\n                        return resolve(JSONData);\r\n                    } else {\r\n                        Log(`Successfully fetched body for URL ${networkRequest.url}`);\r\n                        return resolve(body);\r\n                    }\r\n                }\r\n            });\r\n        };\r\n\r\n        // make first request attempt\r\n        process.nextTick(attemptRequest);\r\n    }.bind(this));\r\n}\r\n\r\nmodule.exports = MakeRequest;"]}