{"version":3,"sources":["../lib/ride.js"],"names":[],"mappings":";;;;;;AAAA;AACA,IAAI,WAAW,QAAf;AACA,IAAI,aAAa,QAAjB;AACA,IAAI,oBAAoB,QAAxB;AACA,IAAI,mBAAmB,QAAvB;;AAEA;AACA,IAAI,WAAW,QAAQ,iBAAR,CAAf;;AAEA;;;;;;;;;;AAUA;;;;;;;IAMM,I;AACF;;;;;;AAMA,oBAGG;AAAA,YAHS,OAGT,yDAHmB;AAClB,qBAAS,IADS;AAElB,uBAAW;AAFO,SAGnB;;AAAA;;AACC,YAAI,CAAC,QAAQ,OAAb,EAAsB,MAAM,IAAI,KAAJ,CAAU,wCAAV,CAAN;AACtB,YAAI,CAAC,QAAQ,SAAT,IAAsB,QAAQ,SAAR,IAAqB,EAA/C,EAAmD,MAAM,IAAI,KAAJ,CAAU,0CAAV,CAAN;;AAEnD,aAAK,QAAL,IAAiB,QAAQ,OAAzB;AACA,aAAK,UAAL,IAAmB,QAAQ,SAA3B;AACH;;AAED;;;;;;;;iCAIS;AACL,mBAAO;AACH,oBAAI,KAAK,QAAL,CADD;AAEH,sBAAM,KAAK,IAFR;AAGH,wBAAQ,KAAK,MAHV;AAIH,2BAAW,KAAK,QAJb;AAKH,6BAAa,KAAK;AALf,aAAP;AAOH;;AAED;;;;;;;;iCAKS,Q,EAAU;AACf;AACA,iBAAK,QAAL,IAAiB,SAAS,EAA1B;AACA,iBAAK,UAAL,IAAmB,SAAS,IAA5B;AACA,iBAAK,gBAAL,IAAyB,SAAS,WAAlC;;AAEA;AACA,gBAAI,CAAC,SAAS,MAAd,EAAsB;AAClB;AACA,qBAAK,iBAAL,IAA0B,CAAC,CAA3B;AACH,aAHD,MAGO;AACH,qBAAK,iBAAL,IAA0B,SAAS,SAAnC;AACH;AACJ;;AAED;;;;;;;;4BAKW;AACP,mBAAO,KAAK,UAAL,CAAP;AACH;;AAED;;;;;;;0BAIa,K,EAAO;AAChB;AACA,gBAAI,KAAK,iBAAL,MAA4B,SAA5B,IAAyC,KAAK,iBAAL,KAA2B,KAAxE,EAA+E;AAC3E;AACA;;AAEA;AACA,qBAAK,gBAAL,IAAyB,KAAK,GAAL,EAAzB;AACA;AACA,qBAAK,iBAAL,IAA0B,KAA1B;AACH;;AAED;AACH;;AAED;;;;;;4BAKe;AACX;AACA,gBAAI,KAAK,iBAAL,MAA4B,SAA5B,IAAyC,KAAK,iBAAL,IAA0B,CAAvE,EAA0E,OAAO,CAAP;;AAE1E,mBAAO,KAAK,iBAAL,CAAP;AACH;;AAED;;;;;;;4BAIa;AACT;AACA,gBAAI,KAAK,iBAAL,MAA4B,SAAhC,EAA2C,OAAO,KAAP;;AAE3C,mBAAO,KAAK,iBAAL,KAA2B,CAAlC;AACH;;AAED;;;;;;;;4BAKiB;AACb,mBAAO,KAAK,gBAAL,CAAP;AACH;;;;;;AAGL;;;AACA,OAAO,OAAP,GAAiB,IAAjB","file":"ride.js","sourcesContent":["// symbols\r\nvar s_rideID = Symbol();\r\nvar s_rideName = Symbol();\r\nvar s_currentWaitTime = Symbol();\r\nvar s_lastTimeUpdate = Symbol();\r\n\r\n// debug print lib\r\nvar DebugLog = require('./debugPrint.js');\r\n\r\n/**\r\n * @typedef RideData\r\n * @type Object\r\n * @property {String} id Unique Ride ID\r\n * @property {String} name The ride's name\r\n * @property {Bool} active Is this ride currently operating?\r\n * @property {Number} wait_time Ride's current queue time\r\n * @property {Number} last_update Last time this Ride has a wait time change (in milliseconds)\r\n */\r\n\r\n/**\r\n * Ride Class\r\n * Each ride object represents one ride at a theme park.\r\n * This object will hold the ride's current state.\r\n * @class\r\n */\r\nclass Ride {\r\n    /**\r\n     * Create a new Ride object\r\n     * @param {Object} options New ride data\r\n     * @param {String} options.ride_id Ride's Unique ID\r\n     * @param {String} options.ride_name Ride name\r\n     */\r\n    constructor(options = {\r\n        ride_id: null,\r\n        ride_name: null\r\n    }) {\r\n        if (!options.ride_id) throw new Error(\"No ride ID supplied to new ride object\");\r\n        if (!options.ride_name || options.ride_name == \"\") throw new Error(\"No ride name supplied to new ride object\");\r\n\r\n        this[s_rideID] = options.ride_id;\r\n        this[s_rideName] = options.ride_name;\r\n    }\r\n\r\n    /**\r\n     * Serialize this object (automatically called by JSON.stringify etc.)\r\n     * @returns {RideData} Current ride state\r\n     */\r\n    toJSON() {\r\n        return {\r\n            id: this[s_rideID],\r\n            name: this.Name,\r\n            active: this.Active,\r\n            wait_time: this.WaitTime,\r\n            last_update: this.LastUpdate,\r\n        };\r\n    }\r\n\r\n    /** \r\n     * Restore a state from a JSON object\r\n     * Mainly used to restore ride data from cached data\r\n     * @param {RideData} rideData Ride data to restore (ideally created using toJSON)\r\n     */\r\n    fromJSON(rideData) {\r\n        // restore base ride data\r\n        this[s_rideID] = rideData.id;\r\n        this[s_rideName] = rideData.name;\r\n        this[s_lastTimeUpdate] = rideData.last_update;\r\n\r\n        // .Active is inferred by WaitTime\r\n        if (!rideData.active) {\r\n            // set WaitTime to -1 if the ride isn't active\r\n            this[s_currentWaitTime] = -1;\r\n        } else {\r\n            this[s_currentWaitTime] = rideData.wait_time;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get this ride's name\r\n     * Note: Will attempt to return in English, but will fallback to park's local locale if English isn't available\r\n     * @type {String}\r\n     */\r\n    get Name() {\r\n        return this[s_rideName];\r\n    }\r\n\r\n    /**\r\n     * Set this ride's wait time\r\n     * @type {Number}\r\n     */\r\n    set WaitTime(value) {\r\n        // check for updated (or brand new) wait time for this ride\r\n        if (this[s_currentWaitTime] === undefined || this[s_currentWaitTime] != value) {\r\n            // ride time has changed!\r\n            //DebugLog(`${this.Name}:`, `Time updated from ${this[s_currentWaitTime]} to ${value}`);\r\n\r\n            // update our last updated time to now\r\n            this[s_lastTimeUpdate] = Date.now();\r\n            // update our wait time for this ride\r\n            this[s_currentWaitTime] = value;\r\n        }\r\n\r\n        // value hasn't changed, don't do anything\r\n    }\r\n\r\n    /**\r\n     * Get this ride's current wait time. Will always be >= 0.\r\n     * Use .Active to determine ride's open status\r\n     * @type {Number}\r\n     */\r\n    get WaitTime() {\r\n        // always return positive ints for the wait time, even when inactive or not defined yet\r\n        if (this[s_currentWaitTime] === undefined || this[s_currentWaitTime] < 0) return 0;\r\n\r\n        return this[s_currentWaitTime];\r\n    }\r\n\r\n    /**\r\n     * Is this ride currently running?\r\n     * @type {Boolean}\r\n     */\r\n    get Active() {\r\n        // if we have no data yet, assume ride is inactive\r\n        if (this[s_currentWaitTime] === undefined) return false;\r\n\r\n        return this[s_currentWaitTime] >= 0;\r\n    }\r\n\r\n    /**\r\n     * Get this ride's last wait time update time.\r\n     * Note: Can be undefined\r\n     * @type {Number}\r\n     */\r\n    get LastUpdate() {\r\n        return this[s_lastTimeUpdate];\r\n    }\r\n}\r\n\r\n// export the Ride class\r\nmodule.exports = Ride;"]}